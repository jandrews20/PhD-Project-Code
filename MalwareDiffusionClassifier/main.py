import os

import numpy as np
from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay, accuracy_score, precision_score, recall_score, \
    f1_score
from torch.utils.data import Dataset, DataLoader
import EmberHistogramLoader
from DiffusionModel import Unet1D, GaussianDiffusion1D
import torch
from torch.optim import Adam
from torch import Tensor
import json
import sys
import DiffusionClassifier
import matplotlib.pyplot as plt

class DataSetTest(Dataset):

    def __init__(self, tensor: Tensor, labels):
        self.tensor = tensor.clone()
        self.labels = labels
    def __len__(self):
        return len(self.tensor)

    def __getitem__(self, idx):
        img = self.tensor[idx]
        label = self.labels[idx]

        return img, label

if __name__ == '__main__':
    num_classes = 2
    channels = 1
    batch_size = 256
    dim = int(sys.argv[1]) if len(sys.argv) >= 2 else 64
    device = torch.device("cuda" if torch.cuda.is_available() else "cpu")

    #train_histograms, train_labels = EmberHistogramLoader.LoadDatasetFromFolder("C:/Users/40237845/Documents/Ember_2017/ember_2017_2/train")
    train_histograms, train_labels = EmberHistogramLoader.LoadDatasetFromFile("C:/Users/40237845/Documents/Ember_2017/ember_2017_2/test_features.jsonl")
    # test_histograms, test_labels = EmberHistogramLoader.LoadDatasetFromFile("C:/Users/40237845/Documents/Ember_2017/ember_2017_2/test_features.jsonl")
    #
    # train_dataset = DataSetTest(train_histograms, train_labels)
    # test_dataset = DataSetTest(test_histograms, test_labels)
    #
    # dataloader = DataLoader(train_dataset, batch_size=batch_size, shuffle=False)
    # dataloader_val = DataLoader(test_dataset, batch_size=batch_size, shuffle=False)

    model = Unet1D(
        dim = dim,
        channels=1,
        dim_mults = (1, 2, 4),
        num_classes = num_classes,
        cond_drop_prob = 0.5
    )

    diffusion = GaussianDiffusion1D(
        model,
        seq_length = 256,
        timesteps = 1000,
        auto_normalize=False
    ).cuda()

    optimizer = Adam(model.parameters(), lr=5e-4)

    #train()
    model.load_state_dict(torch.load("./results2/model49.pt"))
    # benign_samples = diffusion.sample(
    #      classes = torch.IntTensor(np.zeros(10000)).cuda(),
    #      cond_scale = 7.
    # )
    #
    # malware_samples = diffusion.sample(
    #     classes=torch.IntTensor(np.ones(10000)).cuda(),
    #     cond_scale=7.
    # )
    #
    # benign_samples = benign_samples.cpu().numpy().squeeze(1)
    # malware_samples = malware_samples.cpu().numpy().squeeze(1)

    # test_samples = diffusion.sample(
    #      classes = torch.IntTensor([1]).cuda(),
    #      cond_scale = 7.
    # )
    # test_samples = (test_samples * 2) - 1
    model.eval()
    limit = 1
    labels_for_data = train_labels[0:512*limit]
    predicted_labels = np.array([])

    for i in range(limit):
        predicted_labels = np.concatenate((predicted_labels, DiffusionClassifier.Classify(diffusion, train_histograms[512*i:(512*(i+1))], [0, 1], 1000)))

    confusion = confusion_matrix(labels_for_data, predicted_labels)
    ConfusionMatrixDisplay(confusion, display_labels=["Benign", "Malware"]).plot()
    plt.savefig(f"{os.getcwd()}/Confusion Matrices/Confusion_{dim}.png")
    plt.show()

    metrics = {
        "Overall Accuracy": accuracy_score(labels_for_data, predicted_labels),
        "Precision Score": precision_score(labels_for_data, predicted_labels),
        "Recall Score": recall_score(labels_for_data, predicted_labels),
        "F1 Score": f1_score(labels_for_data, predicted_labels)
    }
    json.dump(metrics, open(f'./LGBM Metrics/metrics_{dim}.json', 'w'))



