import numpy as np
from sklearn.metrics import accuracy_score
from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay
from DiffusionModel import Unet, p_losses, num_to_groups, train, sample
import matplotlib.pyplot as plt

def denormalize_neg_one_to_zero(data):
    return (data + 1) * 0.5

def denormalize_zero_to_one(data, max):
    return data * max

def round_to_neg_one(data):
    data = np.where(data < -1, -1, data)
    return data
def generateLabelsForTesting(classNum, testDataNum):
    labels = np.array([])
    for i in range(classNum):
        for j in range(testDataNum):
            labels = np.append(labels, i)
    return labels

def EvaluateMalwareClassQuality(diffusionModel, LGBMModel, malwareClasses):
    labels = np.ones(100)

    for malwareClass in malwareClasses:
        samples = np.array(sample(diffusionModel, malwareClasses.index(malwareClass), 256, 500, 1))
        samples = round_to_neg_one(samples)
        samples = denormalize_neg_one_to_zero(samples)
        samples = np.squeeze(samples, axis=2)
        test_prediction = LGBMModel.predict(samples[-1])
        print(f"\nAccuracy for Class {malwareClass}: {np.count_nonzero(test_prediction == 1)/500}")

def EvaluateMalwareClassQualityBinary(diffusionModel, LGBMModel, malwareClasses):
    labels = np.ones(1000)

    sampleList = np.empty((0, 256))
    for malwareClass in malwareClasses:
        samples = np.array(sample(diffusionModel, malwareClasses.index(malwareClass), 256, 100, 1))
        samples = round_to_neg_one(samples)
        samples = denormalize_neg_one_to_zero(samples)
        samples = np.squeeze(samples, axis=2)
        sampleList = np.append(sampleList, samples[-1], axis=0)

    test_pred = LGBMModel.predict(sampleList)
    print('LightGBM Model accuracy score: {0:0.4f}'.format(accuracy_score(labels, test_pred)))
    confusion = confusion_matrix(labels, test_pred)
    ConfusionMatrixDisplay(confusion, display_labels = ["Benign", "Malware"]).plot(xticks_rotation="vertical")
    plt.show()
def EvaluateMalwareClassQualityMulticlass(diffusionModel, LGBMModel, malwareClasses):
    labels = generateLabelsForTesting(10, 100)
    sampleList = np.empty((0, 256))
    for malwareClass in malwareClasses:
        samples = np.array(sample(diffusionModel, malwareClasses.index(malwareClass), 256, 100, 1))
        samples = round_to_neg_one(samples)
        samples = denormalize_neg_one_to_zero(samples)
        samples = np.squeeze(samples, axis=2)
        sampleList = np.append(sampleList, samples[-1], axis=0)

    print(sampleList)
    test_pred = LGBMModel.predict(sampleList)
    print('LightGBM Model accuracy score: {0:0.4f}'.format(accuracy_score(labels, test_pred)))
    confusion = confusion_matrix(labels, test_pred)
    ConfusionMatrixDisplay(confusion, display_labels=malwareClasses).plot(xticks_rotation="vertical")
    plt.show()




