# separate model definition from training loop cell
import numpy as np
from torch import Tensor
from torch.optim import Adam
import torch
import EmberHistogramLoader
from DiffusionModel import Unet, p_losses, num_to_groups, train, sample
from torchvision.utils import save_image
from datasets import load_dataset
from torchvision import transforms
from torchvision.transforms import Compose, ToTensor, Lambda, ToPILImage, CenterCrop, Resize
from torch.utils.data import DataLoader, Dataset
from sklearn.model_selection import train_test_split

class DataSetTest(Dataset):

    def __init__(self, tensor: Tensor, labels):
        self.tensor = tensor.clone()
        self.labels = labels
    def __len__(self):
        return len(self.tensor)

    def __getitem__(self, idx):
        img = self.tensor[idx]
        label = self.labels[idx]

        return img, label

def denormalize_neg_one_to_zero(data):
    return (data + 1) * 0.5

def denormalize_zero_to_one(data, max):
    return data * max

def round_to_neg_one(data):
    data = np.where(data < -1, -1, data)
    return data

# Press the green button in the gutter to run the script.
if __name__ == '__main__':
    device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
    print(device)

    #dataset = load_dataset("mnist")


    histograms, labels, maxValue = EmberHistogramLoader.LoadDatasetFromFile("C:/Users/40237845/Documents/Ember_2017/ember_2017_2/test_features.jsonl")
    hist_train, hist_test, label_train, label_test = train_test_split(histograms, labels, test_size = 0.3, random_state = 4)


    emberDataset = DataSetTest(hist_train, label_train)
    testEmberDataset = DataSetTest(hist_test, label_test)

    emberDataloader = DataLoader(emberDataset, batch_size=128, shuffle=True)
    testEmberDataloader = DataLoader(testEmberDataset, batch_size=128, shuffle=True)

    model = Unet(
        dim=128,
        channels=1,
        dim_mults=(1, 2, 4)
    )
    model.to(device)

    optimizer = Adam(model.parameters(), lr=5e-4)

    #train(model, emberDataloader, testEmberDataloader, epochs=100, optimizer=optimizer)

    model.load_state_dict(torch.load("./results/model99.pt", torch.device('cpu')))

    label = 1
    samples = np.array(sample(model, label, 256, 10, 1))
    samples = round_to_neg_one(samples)
    samples = denormalize_neg_one_to_zero(samples)
    samples = denormalize_zero_to_one(samples, maxValue)
    print(samples[-1][0])

# See PyCharm help at https://www.jetbrains.com/help/pycharm/
