import io
import os
import json
import torch
import numpy as np

def LoadDatasetFromFile(filepath):
    histograms = []
    labels = []

    lines = open(filepath)

    for line in lines:
        jsonParse = json.loads(line)

        if jsonParse["label"] == 0 or jsonParse["label"] == 1:
            array = np.array(jsonParse['histogram'], dtype=np.float64)
            sum = np.sum(array)
            normalised = np.divide(array, sum)
            histograms.append(normalised)
            labels.append(jsonParse['label'])
    histograms = np.array(histograms)

    #normalised_histograms = histograms / max
    normalised_histograms = (histograms * 2) - 1
    return torch.Tensor(normalised_histograms).unsqueeze(1), torch.IntTensor(labels)

def LoadDatasetFromFolder(filepath):

    histograms = []
    labels = []

    for samples in os.listdir(filepath):

        lines = open(filepath + "/" + samples)

        for line in lines:
            jsonParse = json.loads(line)

            if jsonParse["label"] == 0 or jsonParse["label"] == 1:
                array = np.array(jsonParse['histogram'], dtype=np.float64)
                sum = np.sum(array)
                normalised = np.divide(array, sum)
                histograms.append(normalised)
                labels.append(jsonParse['label'])
    histograms = np.array(histograms)

    normalised_histograms = (histograms * 2) - 1
    return torch.Tensor(normalised_histograms).unsqueeze(1), torch.IntTensor(labels)

def LoadDatasetFromFileWithBenignAndFamilies(filepath):
    histograms = []
    labels = []
    malwareClasses = ["xtrat", "installmonster", "zusy", "vtflooder", "zbot", "fareit", "ramnit", "salty", "adposhel",
                      "emotet"]

    lines = open(filepath)

    for line in lines:
        jsonParse = json.loads(line)

        if (jsonParse["avclass"] == "" or jsonParse["avclass"] in malwareClasses) and jsonParse["label"] != -1:
            array = np.array(jsonParse['histogram'], dtype=np.float64)
            sum = np.sum(array)
            normalised = np.divide(array, sum)
            histograms.append(normalised)
            labels.append(jsonParse['label'])
    histograms = np.array(histograms)

    #normalised_histograms = histograms / max
    normalised_histograms = (histograms * 2) - 1
    return torch.Tensor(normalised_histograms).unsqueeze(1), torch.IntTensor(labels)

def LoadDatasetFromFolderWithBenignAndFamilies(filepath):

    histograms = []
    labels = []
    malwareClasses = ["xtrat", "installmonster", "zusy", "vtflooder", "zbot", "fareit", "ramnit", "salty", "adposhel",
                      "emotet"]

    for samples in os.listdir(filepath):

        lines = open(filepath + "/" + samples)

        for line in lines:
            jsonParse = json.loads(line)

            if (jsonParse["avclass"] == "" or jsonParse["avclass"] in malwareClasses) and jsonParse["label"] != -1:
                array = np.array(jsonParse['histogram'], dtype=np.float64)
                sum = np.sum(array)
                normalised = np.divide(array, sum)
                histograms.append(normalised)
                labels.append(jsonParse['label'])
    histograms = np.array(histograms)

    normalised_histograms = (histograms * 2) - 1
    return torch.Tensor(normalised_histograms).unsqueeze(1), torch.IntTensor(labels)


def LoadDatasetFromFileWithFamilies(filepath):
    histograms = []
    labels = []

    malwareClasses = ["xtrat", "installmonster", "zusy", "vtflooder", "zbot", "fareit", "ramnit", "salty", "adposhel",
                      "emotet"]

    lines = open(filepath)

    for line in lines:
        jsonParse = json.loads(line)

        if jsonParse["avclass"] != "" and jsonParse["avclass"] in malwareClasses:
            array = np.array(jsonParse['histogram'], dtype=np.float64)
            sum = np.sum(array)
            normalised = np.divide(array, sum)
            histograms.append(normalised)
            labels.append(malwareClasses.index(jsonParse["avclass"]))
    histograms = np.array(histograms)

    #normalised_histograms = histograms / max
    normalised_histograms = (histograms * 2) - 1
    return torch.Tensor(normalised_histograms).unsqueeze(1), torch.IntTensor(labels)


def LoadDatasetFromFolderWithFamilies(filepath):

    histograms = []
    labels = []

    malwareClasses = ["xtrat", "installmonster", "zusy", "vtflooder", "zbot", "fareit", "ramnit", "salty", "adposhel",
                      "emotet"]

    for samples in os.listdir(filepath):

        lines = open(filepath + "/" + samples)

        for line in lines:
            jsonParse = json.loads(line)

            if jsonParse["avclass"] != "" and jsonParse["avclass"] in malwareClasses:
                array = np.array(jsonParse['histogram'], dtype=np.float64)
                sum = np.sum(array)
                normalised = np.divide(array, sum)
                histograms.append(normalised)
                labels.append(malwareClasses.index(jsonParse["avclass"]))
    histograms = np.array(histograms)

    normalised_histograms = (histograms * 2) - 1
    return torch.Tensor(normalised_histograms).unsqueeze(1), torch.IntTensor(labels)