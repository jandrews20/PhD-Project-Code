import json
import os

import numpy as np
import lightgbm
from sklearn.metrics import accuracy_score, classification_report, precision_score, recall_score, f1_score
from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay
import matplotlib.pyplot as plt
def AssessHistogramQuality(lgbmModel, benignSamples, malwareSamples, dim):
    combined_labels = np.concatenate((np.zeros(10000), np.ones(10000)))
    combined_samples = np.concatenate((benignSamples, malwareSamples))

    predictions = lgbmModel.predict(combined_samples)
    confusion = confusion_matrix(combined_labels, predictions)
    ConfusionMatrixDisplay(confusion, display_labels=["Benign", "Malware"]).plot()
    plt.savefig(f"{os.getcwd()}/Confusion Matrices/Confusion_{dim}.png")
    plt.show()

    print(combined_labels)
    print(predictions)
    classificationReport = classification_report(combined_labels, predictions)
    print(classificationReport)

    LGBMMetrics = {
        "overall_accuracy": accuracy_score(combined_labels, predictions),
        "precision": precision_score(combined_labels, predictions),
        "recall": recall_score(combined_labels, predictions),
        "f1score": f1_score(combined_labels, predictions)
    }

    json.dump(LGBMMetrics, open(f"{os.getcwd()}/LGBM Metrics/LGBMMetrics_{dim}.json", "w"))

def AssessHistogramQualityWithFamilies(lgbmModel, malwareSamples, dim):
    combined_labels = np.repeat([0,1,2,3,4,5,6,7,8,9], 10)

    predictions = lgbmModel.predict(malwareSamples)
    confusion = confusion_matrix(combined_labels, predictions)
    ConfusionMatrixDisplay(confusion, display_labels=["Benign", "Malware"]).plot()
    plt.savefig(f"{os.getcwd()}/Confusion Matrices/Confusion_{dim}.png")
    plt.show()

    classificationReport = classification_report(combined_labels, predictions)

    LGBMMetrics = {
        "overall_accuracy": accuracy_score(combined_labels, predictions),
        "precision": precision_score(combined_labels, predictions),
        "recall": recall_score(combined_labels, predictions),
        "f1score": f1_score(combined_labels, predictions)
    }

    json.dump(LGBMMetrics, open(f"{os.getcwd()}/LGBM Metrics/LGBMMetrics_{dim}.json", "w"))
